name: üöÄ Deploy OpenScholar API to RunPod

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      deploy_to_runpod:
        description: 'Deploy to RunPod after Docker build'
        required: false
        default: 'true'
        type: boolean

env:
  DOCKER_IMAGE: caelusway/open-scholar-inference
  RUNPOD_HOST: mt6rz9fwgoa11u-64411a76@ssh.runpod.io

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: üì¶ Install dependencies for testing
      run: |
        python -m pip install --upgrade pip
        pip install fastapi uvicorn pydantic python-dotenv
        pip install pytest httpx  # For API testing

    - name: üß™ Run basic tests
      run: |
        # Test basic imports without initializing the app
        python -c "
        import sys
        print('üîç Testing basic imports...')
        
        # Test FastAPI related imports
        try:
            import fastapi
            import uvicorn
            import pydantic
            from dotenv import load_dotenv
            print('‚úÖ Basic dependencies import successfully')
        except ImportError as e:
            print(f'‚ùå Basic import error: {e}')
            sys.exit(1)
        
        # Test that main.py has proper structure without importing it
        import ast
        try:
            with open('main.py', 'r') as f:
                ast.parse(f.read())
            print('‚úÖ main.py syntax is valid')
        except SyntaxError as e:
            print(f'‚ùå main.py syntax error: {e}')
            sys.exit(1)
            
        # Test handler.py structure
        try:
            with open('handler.py', 'r') as f:
                ast.parse(f.read())
            print('‚úÖ handler.py syntax is valid')
        except SyntaxError as e:
            print(f'‚ùå handler.py syntax error: {e}')
            sys.exit(1)
        
        print('‚úÖ All basic tests passed')
        "

    - name: üîç Lint code structure
      run: |
        echo "üîç Checking Python syntax..."
        
        # Check main files
        python -m py_compile main.py && echo "‚úÖ main.py compiles"
        python -m py_compile handler.py && echo "‚úÖ handler.py compiles"
        
        # Check openscholar_api module
        if [ -d "openscholar_api" ]; then
          for file in openscholar_api/*.py; do
            if [ -f "$file" ]; then
              python -m py_compile "$file" && echo "‚úÖ $(basename $file) compiles"
            fi
          done
        fi
        
        # Check for common issues
        echo "üîç Checking for common issues..."
        
        # Check for missing __init__.py files
        if [ -d "openscholar_api" ] && [ ! -f "openscholar_api/__init__.py" ]; then
          echo "‚ö†Ô∏è Warning: openscholar_api/__init__.py is missing"
        fi
        
        echo "‚úÖ All syntax checks completed successfully"

  build-docker:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.deploy_to_runpod == 'true'
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üê≥ Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: üîë Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: üèóÔ∏è Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        platforms: linux/amd64
        tags: |
          ${{ env.DOCKER_IMAGE }}:latest
          ${{ env.DOCKER_IMAGE }}:runpod
          ${{ env.DOCKER_IMAGE }}:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: üè∑Ô∏è Add version tag if release
      if: startsWith(github.ref, 'refs/tags/')
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        platforms: linux/amd64
        tags: ${{ env.DOCKER_IMAGE }}:${{ github.ref_name }}

  deploy-to-runpod:
    needs: [build-and-test, build-docker]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.event.inputs.deploy_to_runpod == 'true'
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üîë Setup SSH key
      run: |
        mkdir -p ~/.ssh
        echo "${{ secrets.RUNPOD_SSH_KEY }}" > ~/.ssh/runpod_key
        chmod 600 ~/.ssh/runpod_key
        ssh-keyscan -H ssh.runpod.io >> ~/.ssh/known_hosts

    - name: üöÄ Deploy to RunPod
      run: |
        # Create deployment script
        cat > deploy_script.sh << 'EOF'
        #!/bin/bash
        set -e
        
        echo "üöÄ Starting OpenScholar API deployment..."
        
        # Setup environment
        export DEBIAN_FRONTEND=noninteractive
        cd /workspace
        
        # Stop existing API if running
        pkill -f "python main.py" || echo "No existing API process"
        pkill -f "uvicorn" || echo "No existing uvicorn process"
        
        # Clean up old deployment
        rm -rf openscholar-api-old
        if [ -d "openscholar-api" ]; then
          mv openscholar-api openscholar-api-old
        fi
        
        # Create new deployment directory
        mkdir -p openscholar-api
        cd openscholar-api
        
        # Pull latest Docker image and extract files
        echo "üì¶ Pulling latest Docker image..."
        docker pull ${{ env.DOCKER_IMAGE }}:latest
        
        # Create temporary container to extract files
        CONTAINER_ID=$(docker create ${{ env.DOCKER_IMAGE }}:latest)
        docker cp $CONTAINER_ID:/app/ ./
        docker rm $CONTAINER_ID
        
        # Setup environment
        echo "‚öôÔ∏è Setting up environment..."
        cat > .env << 'ENV_EOF'
        OPENSCHOLAR_API_KEY=${{ secrets.OPENSCHOLAR_API_KEY }}
        API_HOST=0.0.0.0
        API_PORT=8002
        DEBUG_LOGGING=false
        SEARCH_TIMEOUT=30
        REQUEST_TIMEOUT=60
        CACHE_DIR=/workspace/openscholar-api/model_cache
        PRODUCTION_MODE=true
        CUDA_VISIBLE_DEVICES=0
        ENV_EOF
        
        # Create required directories
        mkdir -p model_cache logs
        
        # Install/update dependencies
        echo "üì¶ Installing dependencies..."
        pip install -r requirements.txt --upgrade
        
        # Start the API in background
        echo "üåü Starting OpenScholar API..."
        nohup python main.py > logs/api.log 2>&1 &
        
        # Wait for startup and test
        echo "‚è≥ Waiting for API to start..."
        sleep 30
        
        # Health check
        if curl -f http://localhost:8002/health; then
          echo "‚úÖ API deployment successful!"
          echo "üåê API available at: https://mt6rz9fwgoa11u-64411a76-8002.proxy.runpod.net"
        else
          echo "‚ùå API health check failed"
          echo "Checking logs:"
          tail -20 logs/api.log
          exit 1
        fi
        EOF
        
        # Execute deployment script on RunPod
        ssh -i ~/.ssh/runpod_key -o StrictHostKeyChecking=no ${{ env.RUNPOD_HOST }} 'bash -s' < deploy_script.sh

    - name: üß™ Post-deployment test
      run: |
        # Wait a bit more for full initialization
        sleep 15
        
        # Test the deployed API
        ssh -i ~/.ssh/runpod_key -o StrictHostKeyChecking=no ${{ env.RUNPOD_HOST }} << 'EOF'
        echo "üß™ Running post-deployment tests..."
        
        # Test health endpoint
        curl -f http://localhost:8002/health || echo "Health check failed"
        
        # Test search endpoint with API key
        curl -X POST "http://localhost:8002/search" \
          -H "X-API-Key: ${{ secrets.OPENSCHOLAR_API_KEY }}" \
          -H "Content-Type: application/json" \
          -d '{"query": "test query", "final_topk": 2}' \
          --max-time 120 || echo "Search test failed (may be due to model loading)"
        
        # Check process status
        ps aux | grep python | grep main.py || echo "API process not found"
        
        echo "‚úÖ Post-deployment tests completed"
        EOF

    - name: üìä Deployment summary
      if: success()
      run: |
        echo "## üéâ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üìç Deployment Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Docker Image:** \`${{ env.DOCKER_IMAGE }}:latest\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Commit SHA:** \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch:** \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üåê Access Points" >> $GITHUB_STEP_SUMMARY
        echo "- **API Endpoint:** https://mt6rz9fwgoa11u-64411a76-8002.proxy.runpod.net" >> $GITHUB_STEP_SUMMARY
        echo "- **Health Check:** https://mt6rz9fwgoa11u-64411a76-8002.proxy.runpod.net/health" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### üîß Usage" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
        echo "curl -X POST 'https://mt6rz9fwgoa11u-64411a76-8002.proxy.runpod.net/search' \\" >> $GITHUB_STEP_SUMMARY
        echo "  -H 'X-API-Key: your-api-key' \\" >> $GITHUB_STEP_SUMMARY
        echo "  -H 'Content-Type: application/json' \\" >> $GITHUB_STEP_SUMMARY
        echo "  -d '{\"query\": \"CRISPR gene editing\", \"final_topk\": 5}'" >> $GITHUB_STEP_SUMMARY
        echo "\`\`\`" >> $GITHUB_STEP_SUMMARY

  notify-deployment:
    needs: deploy-to-runpod
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: üì£ Notify deployment status
      run: |
        if [ "${{ needs.deploy-to-runpod.result }}" = "success" ]; then
          echo "‚úÖ OpenScholar API deployed successfully to RunPod!"
          echo "üåê Available at: https://mt6rz9fwgoa11u-64411a76-8002.proxy.runpod.net"
        else
          echo "‚ùå Deployment failed. Check the logs above."
        fi